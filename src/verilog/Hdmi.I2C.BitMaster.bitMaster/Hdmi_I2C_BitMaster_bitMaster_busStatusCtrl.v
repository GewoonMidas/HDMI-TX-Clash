/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.6.3. DO NOT MODIFY.
*/
`timescale 100fs/100fs
module Hdmi_I2C_BitMaster_bitMaster_busStatusCtrl
    ( // Inputs
      input  c$arg
    , input  c$arg_0
    , input [15:0] c$arg_1
    , input [2:0] c$arg_2
    , input  c$arg_3
    , input [1:0] c$arg_4
    , input [5:0] c$arg_5
    , input  c$arg_6
    , input  c$arg_7
    , input [32:0] c$arg_8

      // Outputs
    , output wire [32:0] result
    );
  reg [32:0] result_0;
  wire [32:0] c$app_arg;
  wire  c$app_arg_0;
  wire [32:0] c$$j_app_arg;
  reg  c$$j_app_arg_0;
  wire  masterHighBusLow;
  wire  x10;
  wire  x9;
  wire  x8;
  wire  x7;
  wire [13:0] x6;
  wire [5:0] x5;
  wire [3:0] x4;
  wire [1:0] x2;
  wire [1:0] x1;
  wire [32:0] result_1;
  wire  x10_0;
  wire [13:0] x6_0;
  wire [5:0] x5_0;
  wire [3:0] x4_0;
  wire  x3;
  wire [1:0] x2_0;
  wire [1:0] x1_0;
  wire  c$app_arg_1;
  wire  sSCL;
  wire  dSDA;
  wire [32:0] c$busStatusCtrl1_$j_$j1_$j2Out_app_arg;
  wire  x10_1;
  wire  x9_0;
  wire  x8_0;
  wire  x7_0;
  wire [13:0] x6_1;
  wire [5:0] x5_1;
  wire [3:0] x4_1;
  wire  x3_0;
  wire  c$busStatusCtrl1_$j_$j1_$j2Out_app_arg_0;
  wire  c$busStatusCtrl1_$j_$j1_$j2Out_app_arg_1;
  wire  c$busStatusCtrl1_$j_$j1_$j2Out_app_arg_2;
  wire [2:0] f;
  wire  c$busStatusCtrl1_$j_$j1_$j2Out_app_arg_3;
  wire  c$busStatusCtrl1_$j_$j1_$j2Out_app_arg_4;
  wire  c$busStatusCtrl1_$j_$j1_$j2Out_app_arg_5;
  wire [2:0] f_0;
  reg [13:0] c$karg1_case_alt;
  reg [32:0] c$busStatusCtrl1_$j_$j1Out_case_alt;
  wire [32:0] c$busStatusCtrl1_$j_$j1Out_app_arg;
  wire [1:0] x1_1;
  wire [1:0] x2_1;
  wire  x3_1;
  wire [3:0] x4_2;
  wire [5:0] x5_2;
  wire  x7_1;
  wire  x8_1;
  wire  x9_1;
  wire  x10_2;
  wire [13:0] karg1;
  wire  sSDA;
  wire [32:0] c$busStatusCtrl1_$jOut_app_arg;
  wire [5:0] c$vec;
  wire [5:0] c$vec_0;
  wire [13:0] c$karg1_case_alt_selection_1;
  wire [15:0] c$bv;
  wire [13:0] c$busStatusCtrl1_$j_$j1Out_case_alt_selection_1;
  wire [3:0] c$vec_1;
  wire [7:0] c$busStatusCtrl1_$j_$j1Out_case_alt_sel_alt_0;
  wire [5:0] c$busStatusCtrl1_$jOut_app_arg_sel_alt_f_3;

  assign result = c$arg ? {x1,   x2,   1'b0,
                           x4,   x5,   x6,   x7,   x8,   x9,
                           1'b0} : result_0;

  always @(*) begin
    case(c$arg_5[5:3])
      3'b000 : result_0 = c$app_arg;
      3'b001 : result_0 = c$$j_app_arg;
      3'b010 : result_0 = c$$j_app_arg;
      3'b011 : result_0 = c$$j_app_arg;
      default : result_0 = c$$j_app_arg;
    endcase
  end

  assign c$app_arg = c$arg_3 ? {x1,   x2,
                                c$app_arg_0,   x4,   x5,   x6,   x7,   x8,
                                x9,   c$$j_app_arg_0} : {x1,   x2,
                                                         c$app_arg_0,   x4,   x5,   x6,   x7,   x8,
                                                         x9,   x10};

  assign c$app_arg_0 = masterHighBusLow | (c$arg_8[2:2] & (~ c$arg_8[0:0]));

  assign c$$j_app_arg = c$arg_3 ? {x1,   x2,
                                   masterHighBusLow,   x4,   x5,   x6,   x7,
                                   x8,   x9,   c$$j_app_arg_0} : {x1,   x2,
                                                                  masterHighBusLow,   x4,   x5,   x6,   x7,
                                                                  x8,   x9,   x10};

  always @(*) begin
    case(c$arg_2)
      3'b001 : c$$j_app_arg_0 = 1'b1;
      default : c$$j_app_arg_0 = 1'b0;
    endcase
  end

  assign masterHighBusLow = c$arg_6 & ((sSDA == (1'b0)) & c$arg_7);

  assign x10 = result_1[0:0];

  assign x9 = result_1[1:1];

  assign x8 = result_1[2:2];

  assign x7 = result_1[3:3];

  assign x6 = result_1[17:4];

  assign x5 = result_1[23:18];

  assign x4 = result_1[27:24];

  assign x2 = result_1[30:29];

  assign x1 = result_1[32:31];

  assign result_1 = c$arg ? {x1_0,   x2_0,   x3,
                             x4_0,   x5_0,   x6_0,   1'b0,   1'b0,   1'b0,
                             x10_0} : {x1_0,   x2_0,   x3,   x4_0,   x5_0,
                                       x6_0,
                                       ((sSDA == (1'b0)) & (dSDA == (1'b1))) & c$app_arg_1,
                                       ((sSDA == (1'b1)) & (dSDA == (1'b0))) & c$app_arg_1,
                                       (c$arg_8[3:3] | c$arg_8[1:1]) & (~ c$arg_8[2:2]),
                                       x10_0};

  assign x10_0 = c$busStatusCtrl1_$j_$j1_$j2Out_app_arg[0:0];

  assign x6_0 = c$busStatusCtrl1_$j_$j1_$j2Out_app_arg[17:4];

  assign x5_0 = c$busStatusCtrl1_$j_$j1_$j2Out_app_arg[23:18];

  assign x4_0 = c$busStatusCtrl1_$j_$j1_$j2Out_app_arg[27:24];

  assign x3 = c$busStatusCtrl1_$j_$j1_$j2Out_app_arg[28:28];

  assign x2_0 = c$busStatusCtrl1_$j_$j1_$j2Out_app_arg[30:29];

  assign x1_0 = c$busStatusCtrl1_$j_$j1_$j2Out_app_arg[32:31];

  assign c$app_arg_1 = sSCL == (1'b1);

  assign sSCL = c$arg_8[32:32];

  assign dSDA = c$arg_8[29:29];

  assign c$busStatusCtrl1_$j_$j1_$j2Out_app_arg = c$arg ? {{1'b1,
                                                            1'b1},   c$arg_8[32:31],   x3_0,   x4_1,
                                                           x5_1,   x6_1,   x7_0,   x8_0,   x9_0,
                                                           x10_1} : {{((c$busStatusCtrl1_$j_$j1_$j2Out_app_arg_5 & c$busStatusCtrl1_$j_$j1_$j2Out_app_arg_4) | (c$busStatusCtrl1_$j_$j1_$j2Out_app_arg_5 & c$busStatusCtrl1_$j_$j1_$j2Out_app_arg_3)) | (c$busStatusCtrl1_$j_$j1_$j2Out_app_arg_4 & c$busStatusCtrl1_$j_$j1_$j2Out_app_arg_3),
                                                                      ((c$busStatusCtrl1_$j_$j1_$j2Out_app_arg_2 & c$busStatusCtrl1_$j_$j1_$j2Out_app_arg_1) | (c$busStatusCtrl1_$j_$j1_$j2Out_app_arg_2 & c$busStatusCtrl1_$j_$j1_$j2Out_app_arg_0)) | (c$busStatusCtrl1_$j_$j1_$j2Out_app_arg_1 & c$busStatusCtrl1_$j_$j1_$j2Out_app_arg_0)},
                                                                     c$arg_8[32:31],   x3_0,   x4_1,   x5_1,
                                                                     x6_1,   x7_0,   x8_0,   x9_0,   x10_1};

  assign x10_1 = c$busStatusCtrl1_$j_$j1Out_app_arg[0:0];

  assign x9_0 = c$busStatusCtrl1_$j_$j1Out_app_arg[1:1];

  assign x8_0 = c$busStatusCtrl1_$j_$j1Out_app_arg[2:2];

  assign x7_0 = c$busStatusCtrl1_$j_$j1Out_app_arg[3:3];

  assign x6_1 = c$busStatusCtrl1_$j_$j1Out_app_arg[17:4];

  assign x5_1 = c$busStatusCtrl1_$j_$j1Out_app_arg[23:18];

  assign x4_1 = c$busStatusCtrl1_$j_$j1Out_app_arg[27:24];

  assign x3_0 = c$busStatusCtrl1_$j_$j1Out_app_arg[28:28];

  assign c$busStatusCtrl1_$j_$j1_$j2Out_app_arg_0 = f[2:2];

  assign c$busStatusCtrl1_$j_$j1_$j2Out_app_arg_1 = f[1:1];

  assign c$busStatusCtrl1_$j_$j1_$j2Out_app_arg_2 = f[0:0];

  assign c$vec = c$arg_8[23:18];

  // map begin
  genvar i;
  generate
  for (i=0; i < 3; i = i + 1) begin : map
    wire [1:0] map_in;
    assign map_in = c$vec[i*2+:2];
    wire  map_out;
    assign map_out = map_in[0:0];


    assign f[i*1+:1] = map_out;
  end
  endgenerate
  // map end

  assign c$busStatusCtrl1_$j_$j1_$j2Out_app_arg_3 = f_0[2:2];

  assign c$busStatusCtrl1_$j_$j1_$j2Out_app_arg_4 = f_0[1:1];

  assign c$busStatusCtrl1_$j_$j1_$j2Out_app_arg_5 = f_0[0:0];

  assign c$vec_0 = c$arg_8[23:18];

  // map begin
  genvar i_0;
  generate
  for (i_0=0; i_0 < 3; i_0 = i_0 + 1) begin : map_0
    wire [1:0] map_in_0;
    assign map_in_0 = c$vec_0[i_0*2+:2];
    wire  map_out_0;
    assign map_out_0 = map_in_0[1:1];


    assign f_0[i_0*1+:1] = map_out_0;
  end
  endgenerate
  // map end

  assign c$karg1_case_alt_selection_1 = c$arg_8[17:4];

  assign c$bv = (c$arg_1 >> 64'sd2);

  always @(*) begin
    case(c$karg1_case_alt_selection_1)
      14'd0 : c$karg1_case_alt = c$bv[0+:14];
      default : c$karg1_case_alt = c$arg_8[17:4] - 14'd1;
    endcase
  end

  assign c$busStatusCtrl1_$j_$j1Out_case_alt_selection_1 = c$arg_8[17:4];

  assign c$vec_1 = c$arg_8[27:24];

  assign c$busStatusCtrl1_$j_$j1Out_case_alt_sel_alt_0 = ({c$arg_8[23:18],c$vec_1[4-1 -: 2]});

  always @(*) begin
    case(c$busStatusCtrl1_$j_$j1Out_case_alt_selection_1)
      14'd0 : c$busStatusCtrl1_$j_$j1Out_case_alt = {x1_1,
                                                     x2_1,   x3_1,   x4_2,
                                                     c$busStatusCtrl1_$j_$j1Out_case_alt_sel_alt_0[5:0],
                                                     karg1,   x7_1,   x8_1,   x9_1,   x10_2};
      default : c$busStatusCtrl1_$j_$j1Out_case_alt = {x1_1,
                                                       x2_1,   x3_1,   x4_2,   x5_2,   karg1,   x7_1,
                                                       x8_1,   x9_1,   x10_2};
    endcase
  end

  assign c$busStatusCtrl1_$j_$j1Out_app_arg = c$arg ? {x1_1,
                                                       x2_1,   x3_1,   x4_2,   {3 {{1'b1,   1'b1}}},
                                                       karg1,   x7_1,   x8_1,   x9_1,
                                                       x10_2} : c$busStatusCtrl1_$j_$j1Out_case_alt;

  assign x1_1 = c$busStatusCtrl1_$jOut_app_arg[32:31];

  assign x2_1 = c$busStatusCtrl1_$jOut_app_arg[30:29];

  assign x3_1 = c$busStatusCtrl1_$jOut_app_arg[28:28];

  assign x4_2 = c$busStatusCtrl1_$jOut_app_arg[27:24];

  assign x5_2 = c$busStatusCtrl1_$jOut_app_arg[23:18];

  assign x7_1 = c$busStatusCtrl1_$jOut_app_arg[3:3];

  assign x8_1 = c$busStatusCtrl1_$jOut_app_arg[2:2];

  assign x9_1 = c$busStatusCtrl1_$jOut_app_arg[1:1];

  assign x10_2 = c$busStatusCtrl1_$jOut_app_arg[0:0];

  assign karg1 = (c$arg | (~ c$arg_0)) ? 14'd0 : c$karg1_case_alt;

  assign sSDA = c$arg_8[31:31];

  assign c$busStatusCtrl1_$jOut_app_arg_sel_alt_f_3 = ({c$arg_8[27:24],c$arg_4});

  assign c$busStatusCtrl1_$jOut_app_arg = c$arg ? {c$arg_8[32:31],
                                                   c$arg_8[30:29],   c$arg_8[28:28],
                                                   {2 {{1'b0,   1'b0}}},   c$arg_8[23:18],
                                                   c$arg_8[17:4],   c$arg_8[3:3],   c$arg_8[2:2],
                                                   c$arg_8[1:1],
                                                   c$arg_8[0:0]} : {c$arg_8[32:31],
                                                                    c$arg_8[30:29],   c$arg_8[28:28],
                                                                    c$busStatusCtrl1_$jOut_app_arg_sel_alt_f_3[3:0],
                                                                    c$arg_8[23:18],   c$arg_8[17:4],
                                                                    c$arg_8[3:3],   c$arg_8[2:2],   c$arg_8[1:1],
                                                                    c$arg_8[0:0]};


endmodule

