/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.6.3. DO NOT MODIFY.
*/
`timescale 100fs/100fs
module i2c
    ( // Inputs
      input  clk // clock
    , input  arst // reset
    , input  rst
    , input  ena
    , input [15:0] clkCnt
    , input  start
    , input  stop
    , input  read
    , input  write
    , input  ackIn
    , input [7:0] din
    , input [1:0] i2cI

      // Outputs
    , output wire [7:0] dout
    , output wire  hostAck
    , output wire  busy
    , output wire  al
    , output wire  ackOut
    , output wire  i2cO_clk
    , output wire  result_5_1
    , output wire  result_5_2
    , output wire  result_5_3
    );
  // Hdmi/I2C.hs:33:1-3
  wire [2:0] bitResp;
  // Hdmi/I2C.hs:33:1-3
  wire [13:0] ds;
  // Hdmi/I2C.hs:33:1-3
  wire [7:0] ds1;
  wire  clk_0;
  wire  arst_0;
  wire  gen_0;
  wire [16:0] arg;
  wire  rst_0;
  wire  start_0;
  wire  stop_0;
  wire  read_0;
  wire  write_0;
  wire  ackIn_0;
  wire [7:0] din_0;
  wire [2:0] bitResp_1;
  wire [13:0] result_7;
  wire  hostAck_1;
  wire  ackOut_1;
  wire [7:0] dout_1;
  wire [3:0] bitCtrl_0;
  wire  clk_1;
  wire  arst_1;
  wire  gen_1;
  wire [23:0] arg_0;
  wire  rst_1;
  wire  ena_0;
  wire [15:0] clkCnt_0;
  wire [3:0] arg_3;
  wire [2:0] cmd_0;
  wire  din_1;
  wire [1:0] i2cI_0;
  wire [7:0] result_8;
  wire [2:0] result_0;
  wire  cmdAck_0;
  wire  al_1;
  wire  dout_2;
  wire  busy_1;
  wire [3:0] i2cO_0;
  wire [15:0] result;
  wire [3:0] result_5;

  assign result = {ds[11:4],   ds[13:13],
                   ds1[4:4],   bitResp[1:1],   ds[12:12],
                   ds1[3:0]};

  assign bitResp = ds1[7:5];

  assign clk_0 = clk;

  assign arst_0 = arst;

  assign gen_0 = 1'b1;

  assign arg = {rst,   start,   stop,   read,
                write,   ackIn,   din,   bitResp};

  assign rst_0 = arg[16:16];

  assign start_0 = arg[15:15];

  assign stop_0 = arg[14:14];

  assign read_0 = arg[13:13];

  assign write_0 = arg[12:12];

  assign ackIn_0 = arg[11:11];

  assign din_0 = arg[10:3];

  assign bitResp_1 = arg[2:0];

  bytemaster bytemaster_ds
    ( clk_0
    , arst_0
    , gen_0
    , rst_0
    , start_0
    , stop_0
    , read_0
    , write_0
    , ackIn_0
    , din_0
    , bitResp_1
    , hostAck_1
    , ackOut_1
    , dout_1
    , bitCtrl_0 );

  assign result_7 = {hostAck_1,   ackOut_1,
                     dout_1,   bitCtrl_0};

  assign ds = result_7;

  assign clk_1 = clk;

  assign arst_1 = arst;

  assign gen_1 = 1'b1;

  assign arg_0 = {rst,   ena,   clkCnt,
                  ds[3:0],   i2cI};

  assign rst_1 = arg_0[23:23];

  assign ena_0 = arg_0[22:22];

  assign clkCnt_0 = arg_0[21:6];

  assign arg_3 = arg_0[5:2];

  assign i2cI_0 = arg_0[1:0];

  assign cmd_0 = arg_3[3:1];

  assign din_1 = arg_3[0:0];

  bitmaster bitmaster_ds1
    ( clk_1
    , arst_1
    , gen_1
    , rst_1
    , ena_0
    , clkCnt_0
    , cmd_0
    , din_1
    , i2cI_0
    , cmdAck_0
    , al_1
    , dout_2
    , busy_1
    , i2cO_0 );

  assign result_8 = {result_0,   busy_1,
                     i2cO_0};

  assign result_0 = {cmdAck_0,   al_1,   dout_2};

  assign ds1 = result_8;

  assign dout = result[15:8];

  assign hostAck = result[7:7];

  assign busy = result[6:6];

  assign al = result[5:5];

  assign ackOut = result[4:4];

  assign result_5 = result[3:0];

  assign i2cO_clk = result_5[3:3];

  assign result_5_1 = result_5[2:2];

  assign result_5_2 = result_5[1:1];

  assign result_5_3 = result_5[0:0];


endmodule

