/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.6.3. DO NOT MODIFY.
*/
`timescale 100fs/100fs
module bytemaster
    ( // Inputs
      input  clk // clock
    , input  arst // reset
    , input  gen // enable
    , input  rst
    , input  start
    , input  stop
    , input  read
    , input  write
    , input  ackIn
    , input [7:0] din
    , input [2:0] bitResp

      // Outputs
    , output wire  hostAck
    , output wire  ackOut
    , output wire [7:0] dout
    , output wire [3:0] bitCtrl
    );
  wire [21:0] c$ds_case_alt;
  reg [21:0] c$ds_case_alt_0;
  wire [21:0] c$ds_case_alt_1;
  wire [21:0] c$ds_case_alt_2;
  // Hdmi/I2C/ByteMaster.hs:82:1-11
  wire  start_0;
  wire [21:0] c$ds_case_alt_3;
  wire [21:0] c$ds_case_alt_4;
  // Hdmi/I2C/ByteMaster.hs:82:1-11
  wire  write_0;
  wire [21:0] c$ds_case_alt_5;
  wire [21:0] c$ds_case_alt_6;
  wire [21:0] result_0;
  // Hdmi/I2C/ByteMaster.hs:82:1-11
  wire  stop_0;
  // Hdmi/I2C/ByteMaster.hs:82:1-11
  wire  karg;
  wire [21:0] c$ds_case_alt_7;
  wire [21:0] c$ds_case_alt_8;
  wire [21:0] c$ds_case_alt_9;
  wire [21:0] c$ds_case_alt_10;
  // Hdmi/I2C/ByteMaster.hs:82:1-11
  wire  s1;
  wire  c$ds_app_arg;
  wire [0:0] c$ds_app_arg_0;
  // Hdmi/I2C/ByteMaster.hs:82:1-11
  wire  ackIn_0;
  wire [21:0] c$ds_case_alt_11;
  // Hdmi/I2C/ByteMaster.hs:82:1-11
  wire  coreAck;
  wire [21:0] c$ds_case_alt_12;
  // Hdmi/I2C/ByteMaster.hs:82:1-11
  wire  read_0;
  // Hdmi/I2C/ByteMaster.hs:82:1-11
  wire [10:0] a1;
  wire [10:0] c$case_alt;
  wire [10:0] c$case_alt_0;
  wire [10:0] c$app_arg;
  wire [11:0] c$case_alt_1;
  // Hdmi/I2C/ByteMaster.hs:82:1-11
  wire  coreRxd;
  // Hdmi/I2C/ByteMaster.hs:82:1-11
  wire [7:0] din_0;
  wire  c$ds_app_arg_1;
  // Hdmi/I2C/ByteMaster.hs:82:1-11
  reg [21:0] s = {{{1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0},   3'd0},
 3'd0,   3'd4,   1'b0,   1'b0,   1'b0,   1'b0,   1'b1};
  // Hdmi/I2C/ByteMaster.hs:82:1-11
  wire  rst_0;
  wire [16:0] c$arg;
  wire [2:0] c$ds_case_alt_selection_5;
  wire [8:0] c$case_alt_sel_alt_t_0;
  wire [7:0] c$vec;
  wire [13:0] result;

  assign c$arg = {rst,   start,   stop,   read,
                  write,   ackIn,   din,   bitResp};

  assign result = {s[1:1],   s[0:0],
                   ((s[21:14])),   {s[7:5],   s[4:4]}};

  assign c$ds_case_alt = (rst_0 | c$arg[1:1]) ? {a1,
                                                 3'd0,   3'd4,   1'b0,   1'b0,   1'b0,   1'b0,
                                                 1'b1} : c$ds_case_alt_0;

  assign c$ds_case_alt_selection_5 = s[10:8];

  always @(*) begin
    case(c$ds_case_alt_selection_5)
      3'b000 : c$ds_case_alt_0 = c$ds_case_alt_1;
      3'b001 : c$ds_case_alt_0 = c$ds_case_alt_11;
      3'b010 : c$ds_case_alt_0 = c$ds_case_alt_9;
      3'b011 : c$ds_case_alt_0 = c$ds_case_alt_7;
      3'b100 : c$ds_case_alt_0 = c$ds_case_alt_6;
      default : c$ds_case_alt_0 = c$ds_case_alt_5;
    endcase
  end

  assign c$ds_case_alt_1 = ((read_0 | (write_0 | stop_0)) & (~ s[1:1])) ? c$ds_case_alt_2 : {a1,
                                                                                             3'd0,   s[7:5],
                                                                                             c$ds_app_arg_1,   1'b0,
                                                                                             1'b0,   1'b0,   s[0:0]};

  assign c$ds_case_alt_2 = start_0 ? {a1,   3'd1,
                                      3'd0,   c$ds_app_arg_1,   1'b0,   1'b1,
                                      1'b0,   s[0:0]} : c$ds_case_alt_3;

  assign start_0 = c$arg[15:15];

  assign c$ds_case_alt_3 = read_0 ? {a1,   3'd2,
                                     3'd3,   c$ds_app_arg_1,   1'b0,   1'b1,
                                     1'b0,   s[0:0]} : c$ds_case_alt_4;

  assign c$ds_case_alt_4 = write_0 ? {a1,   3'd3,
                                      3'd2,   c$ds_app_arg_1,   1'b0,   1'b1,
                                      1'b0,   s[0:0]} : {a1,   3'd5,   3'd1,
                                                         c$ds_app_arg_1,   1'b0,   1'b1,   1'b0,
                                                         s[0:0]};

  assign write_0 = c$arg[12:12];

  assign c$ds_case_alt_5 = coreAck ? {a1,   3'd0,
                                      3'd4,   c$ds_app_arg_1,   1'b0,   1'b0,
                                      1'b1,   s[0:0]} : {a1,   3'd5,   s[7:5],
                                                         c$ds_app_arg_1,   1'b0,   1'b0,   1'b0,
                                                         s[0:0]};

  assign c$ds_case_alt_6 = coreAck ? result_0 : {a1,
                                                 3'd4,   s[7:5],   c$ds_app_arg,   1'b0,
                                                 1'b0,   1'b0,   s[0:0]};

  assign result_0 = stop_0 ? {a1,   3'd5,   3'd1,
                              1'b1,   1'b0,   1'b0,   1'b0,   karg} : {a1,
                                                                       3'd0,   3'd4,   1'b1,   1'b0,   1'b0,   1'b1,
                                                                       karg};

  assign stop_0 = c$arg[14:14];

  assign karg = ((coreRxd)) == 1'b1;

  assign c$ds_case_alt_7 = coreAck ? c$ds_case_alt_8 : {a1,
                                                        3'd3,   s[7:5],   c$ds_app_arg_1,   1'b0,
                                                        1'b0,   1'b0,   s[0:0]};

  assign c$ds_case_alt_8 = s1 ? {a1,   3'd4,
                                 3'd3,   c$ds_app_arg_1,   1'b0,   1'b0,
                                 1'b0,   s[0:0]} : {a1,   3'd3,   3'd2,
                                                    c$ds_app_arg_1,   1'b1,   1'b0,   1'b0,
                                                    s[0:0]};

  assign c$ds_case_alt_9 = coreAck ? c$ds_case_alt_10 : {a1,
                                                         3'd2,   s[7:5],   c$ds_app_arg_1,   1'b0,
                                                         1'b0,   1'b0,   s[0:0]};

  assign c$ds_case_alt_10 = s1 ? {a1,   3'd4,
                                  3'd2,   c$ds_app_arg,   1'b1,   1'b0,   1'b0,
                                  s[0:0]} : {a1,   3'd2,   3'd3,   c$ds_app_arg,
                                             1'b1,   1'b0,   1'b0,   s[0:0]};

  assign s1 = c$case_alt_1[11:11];

  assign c$ds_app_arg = (c$ds_app_arg_0);

  assign c$ds_app_arg_0 = ackIn_0 ? 1'b1 : 1'b0;

  assign ackIn_0 = c$arg[11:11];

  assign c$ds_case_alt_11 = coreAck ? c$ds_case_alt_12 : {a1,
                                                          3'd1,   s[7:5],   c$ds_app_arg_1,   1'b0,
                                                          1'b0,   1'b0,   s[0:0]};

  assign coreAck = c$arg[2:2];

  assign c$ds_case_alt_12 = read_0 ? {a1,   3'd2,
                                      3'd3,   c$ds_app_arg_1,   1'b0,   1'b1,
                                      1'b0,   s[0:0]} : {a1,   3'd3,   3'd2,
                                                         c$ds_app_arg_1,   1'b0,   1'b1,   1'b0,
                                                         s[0:0]};

  assign read_0 = c$arg[13:13];

  assign a1 = c$case_alt_1[10:0];

  assign c$case_alt_sel_alt_t_0 = ({s[21:14],coreRxd});

  assign c$case_alt = s[3:3] ? {c$case_alt_sel_alt_t_0[7:0],
                                s[13:11] - 3'd1} : s[21:11];

  assign c$case_alt_0 = s[2:2] ? {(din_0),
                                  3'd7} : c$case_alt;

  assign c$app_arg = rst_0 ? {{8 {(1'b0)}},
                              3'd0} : c$case_alt_0;

  assign c$case_alt_1 = {s[13:11] == 3'd0,
                         c$app_arg};

  assign coreRxd = c$arg[0:0];

  assign din_0 = c$arg[10:3];

  assign c$vec = s[21:14];

  assign c$ds_app_arg_1 = c$vec[8-1 -: 1];

  // register begin
  always @(posedge clk or  posedge  arst) begin : s_register
    if ( arst) begin
      s <= {{{1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0},   3'd0},
   3'd0,   3'd4,   1'b0,   1'b0,   1'b0,   1'b0,   1'b1};
    end else if (gen) begin
      s <= c$ds_case_alt;
    end
  end
  // register end

  assign rst_0 = c$arg[16:16];

  assign hostAck = result[13:13];

  assign ackOut = result[12:12];

  assign dout = result[11:4];

  assign bitCtrl = result[3:0];


endmodule

