/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.6.3. DO NOT MODIFY.
*/
`timescale 100fs/100fs
module slave
    ( // Inputs
      input  clk // clock
    , input  eta1_0
    , input  eta1_1

      // Outputs
    , output reg [792:0] result
    );
  wire [1:0] eta1;
  reg [877:0] s0;
  reg  scl;
  reg  sda;
  reg [792:0] result_1;
  reg [7:0] addr1;
  reg [7:0] \c$<<+Out ;
  reg [7:0] c$mapOut;
  reg  c$app_arg;
  reg  prevSCL1;
  reg  c$case_scrut;
  reg [7:0] c$case_scrut_0;
  reg [7:0] c$k1_app_arg;
  reg [791:0] regFile2;
  reg  prevSDA1;
  reg  sdaOut2;
  reg [7:0] regAddr1;
  reg [2:0] atStateM1;
  reg signed [63:0] cntr1;
  reg signed [63:0] x;
  reg [877:0] k;
  reg [877:0] k1;
  reg [877:0] k1_0;
  reg [877:0] k_0;
  reg [7:0] k1_1;
  reg [877:0] k2;
  reg [877:0] k_1;
  reg [7:0] elI0;
  reg [783:0] restI0;
  reg [7:0] elI1;
  reg [775:0] restI1;
  reg [7:0] elI2;
  reg [767:0] restI2;
  reg [7:0] elI3;
  reg [759:0] restI3;
  reg [7:0] elI4;
  reg [751:0] restI4;
  reg [7:0] elI5;
  reg [743:0] restI5;
  reg [7:0] elI6;
  reg [735:0] restI6;
  reg [7:0] elI7;
  reg [727:0] restI7;
  reg [7:0] elI8;
  reg [719:0] restI8;
  reg [7:0] elI9;
  reg [711:0] restI9;
  reg [7:0] elI10;
  reg [703:0] restI10;
  reg [7:0] elI11;
  reg [695:0] restI11;
  reg [7:0] elI12;
  reg [687:0] restI12;
  reg [7:0] elI13;
  reg [679:0] restI13;
  reg [7:0] elI14;
  reg [671:0] restI14;
  reg [7:0] elI15;
  reg [663:0] restI15;
  reg [7:0] elI16;
  reg [655:0] restI16;
  reg [7:0] elI17;
  reg [647:0] restI17;
  reg [7:0] elI18;
  reg [639:0] restI18;
  reg [7:0] elI19;
  reg [631:0] restI19;
  reg [7:0] elI20;
  reg [623:0] restI20;
  reg [7:0] elI21;
  reg [615:0] restI21;
  reg [7:0] elI22;
  reg [607:0] restI22;
  reg [7:0] elI23;
  reg [599:0] restI23;
  reg [7:0] elI24;
  reg [591:0] restI24;
  reg [7:0] elI25;
  reg [583:0] restI25;
  reg [7:0] elI26;
  reg [575:0] restI26;
  reg [7:0] elI27;
  reg [567:0] restI27;
  reg [7:0] elI28;
  reg [559:0] restI28;
  reg [7:0] elI29;
  reg [551:0] restI29;
  reg [7:0] elI30;
  reg [543:0] restI30;
  reg [7:0] elI31;
  reg [535:0] restI31;
  reg [7:0] elI32;
  reg [527:0] restI32;
  reg [7:0] elI33;
  reg [519:0] restI33;
  reg [7:0] elI34;
  reg [511:0] restI34;
  reg [7:0] elI35;
  reg [503:0] restI35;
  reg [7:0] elI36;
  reg [495:0] restI36;
  reg [7:0] elI37;
  reg [487:0] restI37;
  reg [7:0] elI38;
  reg [479:0] restI38;
  reg [7:0] elI39;
  reg [471:0] restI39;
  reg [7:0] elI40;
  reg [463:0] restI40;
  reg [7:0] elI41;
  reg [455:0] restI41;
  reg [7:0] elI42;
  reg [447:0] restI42;
  reg [7:0] elI43;
  reg [439:0] restI43;
  reg [7:0] elI44;
  reg [431:0] restI44;
  reg [7:0] elI45;
  reg [423:0] restI45;
  reg [7:0] elI46;
  reg [415:0] restI46;
  reg [7:0] elI47;
  reg [407:0] restI47;
  reg [7:0] elI48;
  reg [399:0] restI48;
  reg [7:0] elI49;
  reg [391:0] restI49;
  reg [7:0] elI50;
  reg [383:0] restI50;
  reg [7:0] elI51;
  reg [375:0] restI51;
  reg [7:0] elI52;
  reg [367:0] restI52;
  reg [7:0] elI53;
  reg [359:0] restI53;
  reg [7:0] elI54;
  reg [351:0] restI54;
  reg [7:0] elI55;
  reg [343:0] restI55;
  reg [7:0] elI56;
  reg [335:0] restI56;
  reg [7:0] elI57;
  reg [327:0] restI57;
  reg [7:0] elI58;
  reg [319:0] restI58;
  reg [7:0] elI59;
  reg [311:0] restI59;
  reg [7:0] elI60;
  reg [303:0] restI60;
  reg [7:0] elI61;
  reg [295:0] restI61;
  reg [7:0] elI62;
  reg [287:0] restI62;
  reg [7:0] elI63;
  reg [279:0] restI63;
  reg [7:0] elI64;
  reg [271:0] restI64;
  reg [7:0] elI65;
  reg [263:0] restI65;
  reg [7:0] elI66;
  reg [255:0] restI66;
  reg [7:0] elI67;
  reg [247:0] restI67;
  reg [7:0] elI68;
  reg [239:0] restI68;
  reg [7:0] elI69;
  reg [231:0] restI69;
  reg [7:0] elI70;
  reg [223:0] restI70;
  reg [7:0] elI71;
  reg [215:0] restI71;
  reg [7:0] elI72;
  reg [207:0] restI72;
  reg [7:0] elI73;
  reg [199:0] restI73;
  reg [7:0] elI74;
  reg [191:0] restI74;
  reg [7:0] elI75;
  reg [183:0] restI75;
  reg [7:0] elI76;
  reg [175:0] restI76;
  reg [7:0] elI77;
  reg [167:0] restI77;
  reg [7:0] elI78;
  reg [159:0] restI78;
  reg [7:0] elI79;
  reg [151:0] restI79;
  reg [7:0] elI80;
  reg [143:0] restI80;
  reg [7:0] elI81;
  reg [135:0] restI81;
  reg [7:0] elI82;
  reg [127:0] restI82;
  reg [7:0] elI83;
  reg [119:0] restI83;
  reg [7:0] elI84;
  reg [111:0] restI84;
  reg [7:0] elI85;
  reg [103:0] restI85;
  reg [7:0] elI86;
  reg [95:0] restI86;
  reg [7:0] elI87;
  reg [87:0] restI87;
  reg [7:0] elI88;
  reg [79:0] restI88;
  reg [7:0] elI89;
  reg [71:0] restI89;
  reg [7:0] elI90;
  reg [63:0] restI90;
  reg [7:0] elI91;
  reg [55:0] restI91;
  reg [7:0] elI92;
  reg [47:0] restI92;
  reg [7:0] elI93;
  reg [39:0] restI93;
  reg [7:0] elI94;
  reg [31:0] restI94;
  reg [7:0] elI95;
  reg [23:0] restI95;
  reg [7:0] elI96;
  reg [15:0] restI96;
  reg [7:0] elI97;
  reg [7:0] restI97;
  reg [7:0] elI98;
  reg [791:0] k_2;
  reg [877:0] k2_0;
  reg [877:0] k_3;
  reg [877:0] k_4;
  reg [792:0] result_2;
  reg [877:0] s;
  reg [7:0] k__dc_arg_sel_arg;
  reg [7:0] k__dc_arg_sel_arg_0;
  reg [7:0] k__dc_arg_sel_arg_1;
  reg [7:0] k__dc_arg_sel_arg_2;
  reg [7:0] k__dc_arg_sel_arg_3;
  reg [7:0] k__dc_arg_sel_arg_4;
  reg [7:0] k__dc_arg_sel_arg_5;
  reg [7:0] k__dc_arg_sel_arg_6;
  reg [7:0] k__dc_arg_sel_arg_7;
  reg [7:0] k__dc_arg_sel_arg_8;
  reg [7:0] k__dc_arg_sel_arg_9;
  reg [7:0] k__dc_arg_sel_arg_10;
  reg [7:0] k__dc_arg_sel_arg_11;
  reg [7:0] k__dc_arg_sel_arg_12;
  reg [7:0] k__dc_arg_sel_arg_13;
  reg [7:0] k__dc_arg_sel_arg_14;
  reg [7:0] k__dc_arg_sel_arg_15;
  reg [7:0] k__dc_arg_sel_arg_16;
  reg [7:0] k__dc_arg_sel_arg_17;
  reg [7:0] k__dc_arg_sel_arg_18;
  reg [7:0] k__dc_arg_sel_arg_19;
  reg [7:0] k__dc_arg_sel_arg_20;
  reg [7:0] k__dc_arg_sel_arg_21;
  reg [7:0] k__dc_arg_sel_arg_22;
  reg [7:0] k__dc_arg_sel_arg_23;
  reg [7:0] k__dc_arg_sel_arg_24;
  reg [7:0] k__dc_arg_sel_arg_25;
  reg [7:0] k__dc_arg_sel_arg_26;
  reg [7:0] k__dc_arg_sel_arg_27;
  reg [7:0] k__dc_arg_sel_arg_28;
  reg [7:0] k__dc_arg_sel_arg_29;
  reg [7:0] k__dc_arg_sel_arg_30;
  reg [7:0] k__dc_arg_sel_arg_31;
  reg [7:0] k__dc_arg_sel_arg_32;
  reg [7:0] k__dc_arg_sel_arg_33;
  reg [7:0] k__dc_arg_sel_arg_34;
  reg [7:0] k__dc_arg_sel_arg_35;
  reg [7:0] k__dc_arg_sel_arg_36;
  reg [7:0] k__dc_arg_sel_arg_37;
  reg [7:0] k__dc_arg_sel_arg_38;
  reg [7:0] k__dc_arg_sel_arg_39;
  reg [7:0] k__dc_arg_sel_arg_40;
  reg [7:0] k__dc_arg_sel_arg_41;
  reg [7:0] k__dc_arg_sel_arg_42;
  reg [7:0] k__dc_arg_sel_arg_43;
  reg [7:0] k__dc_arg_sel_arg_44;
  reg [7:0] k__dc_arg_sel_arg_45;
  reg [7:0] k__dc_arg_sel_arg_46;
  reg [7:0] k__dc_arg_sel_arg_47;
  reg [7:0] k__dc_arg_sel_arg_48;
  reg [7:0] k__dc_arg_sel_arg_49;
  reg [7:0] k__dc_arg_sel_arg_50;
  reg [7:0] k__dc_arg_sel_arg_51;
  reg [7:0] k__dc_arg_sel_arg_52;
  reg [7:0] k__dc_arg_sel_arg_53;
  reg [7:0] k__dc_arg_sel_arg_54;
  reg [7:0] k__dc_arg_sel_arg_55;
  reg [7:0] k__dc_arg_sel_arg_56;
  reg [7:0] k__dc_arg_sel_arg_57;
  reg [7:0] k__dc_arg_sel_arg_58;
  reg [7:0] k__dc_arg_sel_arg_59;
  reg [7:0] k__dc_arg_sel_arg_60;
  reg [7:0] k__dc_arg_sel_arg_61;
  reg [7:0] k__dc_arg_sel_arg_62;
  reg [7:0] k__dc_arg_sel_arg_63;
  reg [7:0] k__dc_arg_sel_arg_64;
  reg [7:0] k__dc_arg_sel_arg_65;
  reg [7:0] k__dc_arg_sel_arg_66;
  reg [7:0] k__dc_arg_sel_arg_67;
  reg [7:0] k__dc_arg_sel_arg_68;
  reg [7:0] k__dc_arg_sel_arg_69;
  reg [7:0] k__dc_arg_sel_arg_70;
  reg [7:0] k__dc_arg_sel_arg_71;
  reg [7:0] k__dc_arg_sel_arg_72;
  reg [7:0] k__dc_arg_sel_arg_73;
  reg [7:0] k__dc_arg_sel_arg_74;
  reg [7:0] k__dc_arg_sel_arg_75;
  reg [7:0] k__dc_arg_sel_arg_76;
  reg [7:0] k__dc_arg_sel_arg_77;
  reg [7:0] k__dc_arg_sel_arg_78;
  reg [7:0] k__dc_arg_sel_arg_79;
  reg [7:0] k__dc_arg_sel_arg_80;
  reg [7:0] k__dc_arg_sel_arg_81;
  reg [7:0] k__dc_arg_sel_arg_82;
  reg [7:0] k__dc_arg_sel_arg_83;
  reg [7:0] k__dc_arg_sel_arg_84;
  reg [7:0] k__dc_arg_sel_arg_85;
  reg [7:0] k__dc_arg_sel_arg_86;
  reg [7:0] k__dc_arg_sel_arg_87;
  reg [7:0] k__dc_arg_sel_arg_88;
  reg [7:0] k__dc_arg_sel_arg_89;
  reg [7:0] k__dc_arg_sel_arg_90;
  reg [7:0] k__dc_arg_sel_arg_91;
  reg [7:0] k__dc_arg_sel_arg_92;
  reg [7:0] k__dc_arg_sel_arg_93;
  reg [7:0] k__dc_arg_sel_arg_94;
  reg [7:0] k__dc_arg_sel_arg_95;
  reg [7:0] k__dc_arg_sel_arg_96;
  reg [7:0] k__dc_arg_sel_arg_97;
  reg [877:0] stateMachine;
  reg [877:0] stateMachine_sel_alt_sel_arg;
  reg  stateMachine_sel_alt_sel_arg_selection_res;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_res;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_res_1;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_res_0;
  reg [877:0] stateMachine_sel_alt_sel_arg_0;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_sel_arg;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_0;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_2;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_1;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_0;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_3;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_4;
  reg [877:0] stateMachine_sel_alt_sel_arg_1;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_res_2;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_res_4;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_res_3;
  reg [877:0] stateMachine_sel_alt_sel_arg_2;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_1;
  reg  stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_selection_res;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_6;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_5;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_8;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_7;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_2;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_9;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_10;
  reg [877:0] stateMachine_sel_alt_sel_arg_3;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_res_5;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_res_7;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_res_6;
  reg [877:0] stateMachine_sel_alt_sel_arg_4;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_res_9;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_res_8;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_3;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_11;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_12;
  reg [877:0] stateMachine_sel_alt_sel_arg_5;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_res_10;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_res_12;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_res_11;
  reg [877:0] stateMachine_sel_alt_sel_arg_6;
  reg  stateMachine_sel_alt_sel_arg_selection_res_0;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_res_13;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_res_15;
  reg [877:0] stateMachine_sel_alt_sel_arg_sel_alt_res_14;
  wire [1:0] ds;

  assign eta1 = {eta1_0,   eta1_1};

  assign ds = eta1;

  initial begin
    s0 = {{8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,
    8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,
    8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,
    8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,
    8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,
    8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,
    8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,
    8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,
    8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,
    8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0,   8'd0},
   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0},   64'sd0,
   3'd0,   1'b1,   1'b1,   1'b1,   8'd0};


  end



  always @(negedge clk) begin
    scl = ds[1:1];

    sda = ds[0:0];

    s = s0;

    addr1 = s[85:78];

    \c$<<+Out  = {addr1[6:6],   addr1[5:5],
                  addr1[4:4],   addr1[3:3],   addr1[2:2],
                  addr1[1:1],   addr1[0:0],   sda};

    c$mapOut = addr1;

    c$app_arg = scl == (1'b1);

    prevSCL1 = s[10:10];

    c$case_scrut = (prevSCL1 == (1'b0)) & c$app_arg;

    c$case_scrut_0 = (c$mapOut);

    c$k1_app_arg = ((c$mapOut));

    regFile2 = s[877:86];

    prevSDA1 = s[9:9];

    sdaOut2 = s[8:8];

    regAddr1 = s[7:0];

    atStateM1 = s[13:11];

    cntr1 = $signed(s[77:14]);

    x = cntr1;

    k = {regFile2,   addr1,   cntr1,   3'd1,
         prevSCL1,   prevSDA1,   sdaOut2,   regAddr1};

    k1 = {regFile2,   {1'b0,   1'b0,   1'b0,
                       1'b0,   1'b0,   1'b0,   1'b0,   1'b0},
          64'sd0,   3'd0,   prevSCL1,   prevSDA1,
          sdaOut2,   regAddr1};

    k1_0 = {regFile2,   {1'b0,   1'b0,   1'b0,
                         1'b0,   1'b0,   1'b0,   1'b0,   1'b0},
            64'sd0,   3'd2,   prevSCL1,   prevSDA1,
            sdaOut2,   regAddr1};

    k_0 = {regFile2,   addr1,   cntr1,   3'd3,
           prevSCL1,   prevSDA1,   1'b0,   regAddr1};

    k1_1 = c$k1_app_arg >> 64'sd1;

    k2 = {regFile2,   {1'b0,   1'b0,   1'b0,
                       1'b0,   1'b0,   1'b0,   1'b0,   1'b0},
          64'sd0,   3'd4,   prevSCL1,   prevSDA1,
          sdaOut2,   k1_1};

    k_1 = {regFile2,   addr1,   cntr1,   3'd5,
           prevSCL1,   prevSDA1,   1'b0,   regAddr1};

    elI0 = regFile2[791:784];

    restI0 = regFile2[783:0];

    elI1 = restI0[783:776];

    restI1 = restI0[775:0];

    elI2 = restI1[775:768];

    restI2 = restI1[767:0];

    elI3 = restI2[767:760];

    restI3 = restI2[759:0];

    elI4 = restI3[759:752];

    restI4 = restI3[751:0];

    elI5 = restI4[751:744];

    restI5 = restI4[743:0];

    elI6 = restI5[743:736];

    restI6 = restI5[735:0];

    elI7 = restI6[735:728];

    restI7 = restI6[727:0];

    elI8 = restI7[727:720];

    restI8 = restI7[719:0];

    elI9 = restI8[719:712];

    restI9 = restI8[711:0];

    elI10 = restI9[711:704];

    restI10 = restI9[703:0];

    elI11 = restI10[703:696];

    restI11 = restI10[695:0];

    elI12 = restI11[695:688];

    restI12 = restI11[687:0];

    elI13 = restI12[687:680];

    restI13 = restI12[679:0];

    elI14 = restI13[679:672];

    restI14 = restI13[671:0];

    elI15 = restI14[671:664];

    restI15 = restI14[663:0];

    elI16 = restI15[663:656];

    restI16 = restI15[655:0];

    elI17 = restI16[655:648];

    restI17 = restI16[647:0];

    elI18 = restI17[647:640];

    restI18 = restI17[639:0];

    elI19 = restI18[639:632];

    restI19 = restI18[631:0];

    elI20 = restI19[631:624];

    restI20 = restI19[623:0];

    elI21 = restI20[623:616];

    restI21 = restI20[615:0];

    elI22 = restI21[615:608];

    restI22 = restI21[607:0];

    elI23 = restI22[607:600];

    restI23 = restI22[599:0];

    elI24 = restI23[599:592];

    restI24 = restI23[591:0];

    elI25 = restI24[591:584];

    restI25 = restI24[583:0];

    elI26 = restI25[583:576];

    restI26 = restI25[575:0];

    elI27 = restI26[575:568];

    restI27 = restI26[567:0];

    elI28 = restI27[567:560];

    restI28 = restI27[559:0];

    elI29 = restI28[559:552];

    restI29 = restI28[551:0];

    elI30 = restI29[551:544];

    restI30 = restI29[543:0];

    elI31 = restI30[543:536];

    restI31 = restI30[535:0];

    elI32 = restI31[535:528];

    restI32 = restI31[527:0];

    elI33 = restI32[527:520];

    restI33 = restI32[519:0];

    elI34 = restI33[519:512];

    restI34 = restI33[511:0];

    elI35 = restI34[511:504];

    restI35 = restI34[503:0];

    elI36 = restI35[503:496];

    restI36 = restI35[495:0];

    elI37 = restI36[495:488];

    restI37 = restI36[487:0];

    elI38 = restI37[487:480];

    restI38 = restI37[479:0];

    elI39 = restI38[479:472];

    restI39 = restI38[471:0];

    elI40 = restI39[471:464];

    restI40 = restI39[463:0];

    elI41 = restI40[463:456];

    restI41 = restI40[455:0];

    elI42 = restI41[455:448];

    restI42 = restI41[447:0];

    elI43 = restI42[447:440];

    restI43 = restI42[439:0];

    elI44 = restI43[439:432];

    restI44 = restI43[431:0];

    elI45 = restI44[431:424];

    restI45 = restI44[423:0];

    elI46 = restI45[423:416];

    restI46 = restI45[415:0];

    elI47 = restI46[415:408];

    restI47 = restI46[407:0];

    elI48 = restI47[407:400];

    restI48 = restI47[399:0];

    elI49 = restI48[399:392];

    restI49 = restI48[391:0];

    elI50 = restI49[391:384];

    restI50 = restI49[383:0];

    elI51 = restI50[383:376];

    restI51 = restI50[375:0];

    elI52 = restI51[375:368];

    restI52 = restI51[367:0];

    elI53 = restI52[367:360];

    restI53 = restI52[359:0];

    elI54 = restI53[359:352];

    restI54 = restI53[351:0];

    elI55 = restI54[351:344];

    restI55 = restI54[343:0];

    elI56 = restI55[343:336];

    restI56 = restI55[335:0];

    elI57 = restI56[335:328];

    restI57 = restI56[327:0];

    elI58 = restI57[327:320];

    restI58 = restI57[319:0];

    elI59 = restI58[319:312];

    restI59 = restI58[311:0];

    elI60 = restI59[311:304];

    restI60 = restI59[303:0];

    elI61 = restI60[303:296];

    restI61 = restI60[295:0];

    elI62 = restI61[295:288];

    restI62 = restI61[287:0];

    elI63 = restI62[287:280];

    restI63 = restI62[279:0];

    elI64 = restI63[279:272];

    restI64 = restI63[271:0];

    elI65 = restI64[271:264];

    restI65 = restI64[263:0];

    elI66 = restI65[263:256];

    restI66 = restI65[255:0];

    elI67 = restI66[255:248];

    restI67 = restI66[247:0];

    elI68 = restI67[247:240];

    restI68 = restI67[239:0];

    elI69 = restI68[239:232];

    restI69 = restI68[231:0];

    elI70 = restI69[231:224];

    restI70 = restI69[223:0];

    elI71 = restI70[223:216];

    restI71 = restI70[215:0];

    elI72 = restI71[215:208];

    restI72 = restI71[207:0];

    elI73 = restI72[207:200];

    restI73 = restI72[199:0];

    elI74 = restI73[199:192];

    restI74 = restI73[191:0];

    elI75 = restI74[191:184];

    restI75 = restI74[183:0];

    elI76 = restI75[183:176];

    restI76 = restI75[175:0];

    elI77 = restI76[175:168];

    restI77 = restI76[167:0];

    elI78 = restI77[167:160];

    restI78 = restI77[159:0];

    elI79 = restI78[159:152];

    restI79 = restI78[151:0];

    elI80 = restI79[151:144];

    restI80 = restI79[143:0];

    elI81 = restI80[143:136];

    restI81 = restI80[135:0];

    elI82 = restI81[135:128];

    restI82 = restI81[127:0];

    elI83 = restI82[127:120];

    restI83 = restI82[119:0];

    elI84 = restI83[119:112];

    restI84 = restI83[111:0];

    elI85 = restI84[111:104];

    restI85 = restI84[103:0];

    elI86 = restI85[103:96];

    restI86 = restI85[95:0];

    elI87 = restI86[95:88];

    restI87 = restI86[87:0];

    elI88 = restI87[87:80];

    restI88 = restI87[79:0];

    elI89 = restI88[79:72];

    restI89 = restI88[71:0];

    elI90 = restI89[71:64];

    restI90 = restI89[63:0];

    elI91 = restI90[63:56];

    restI91 = restI90[55:0];

    elI92 = restI91[55:48];

    restI92 = restI91[47:0];

    elI93 = restI92[47:40];

    restI93 = restI92[39:0];

    elI94 = restI93[39:32];

    restI94 = restI93[31:0];

    elI95 = restI94[31:24];

    restI95 = restI94[23:0];

    elI96 = restI95[23:16];

    restI96 = restI95[15:0];

    elI97 = restI96[15:8];

    restI97 = restI96[7:0];

    elI98 = restI97[7:0];

    k__dc_arg_sel_arg = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd0) ? c$k1_app_arg : elI0;

    k__dc_arg_sel_arg_0 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd1) ? c$k1_app_arg : elI1;

    k__dc_arg_sel_arg_1 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd2) ? c$k1_app_arg : elI2;

    k__dc_arg_sel_arg_2 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd3) ? c$k1_app_arg : elI3;

    k__dc_arg_sel_arg_3 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd4) ? c$k1_app_arg : elI4;

    k__dc_arg_sel_arg_4 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd5) ? c$k1_app_arg : elI5;

    k__dc_arg_sel_arg_5 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd6) ? c$k1_app_arg : elI6;

    k__dc_arg_sel_arg_6 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd7) ? c$k1_app_arg : elI7;

    k__dc_arg_sel_arg_7 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd8) ? c$k1_app_arg : elI8;

    k__dc_arg_sel_arg_8 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd9) ? c$k1_app_arg : elI9;

    k__dc_arg_sel_arg_9 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd10) ? c$k1_app_arg : elI10;

    k__dc_arg_sel_arg_10 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd11) ? c$k1_app_arg : elI11;

    k__dc_arg_sel_arg_11 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd12) ? c$k1_app_arg : elI12;

    k__dc_arg_sel_arg_12 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd13) ? c$k1_app_arg : elI13;

    k__dc_arg_sel_arg_13 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd14) ? c$k1_app_arg : elI14;

    k__dc_arg_sel_arg_14 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd15) ? c$k1_app_arg : elI15;

    k__dc_arg_sel_arg_15 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd16) ? c$k1_app_arg : elI16;

    k__dc_arg_sel_arg_16 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd17) ? c$k1_app_arg : elI17;

    k__dc_arg_sel_arg_17 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd18) ? c$k1_app_arg : elI18;

    k__dc_arg_sel_arg_18 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd19) ? c$k1_app_arg : elI19;

    k__dc_arg_sel_arg_19 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd20) ? c$k1_app_arg : elI20;

    k__dc_arg_sel_arg_20 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd21) ? c$k1_app_arg : elI21;

    k__dc_arg_sel_arg_21 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd22) ? c$k1_app_arg : elI22;

    k__dc_arg_sel_arg_22 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd23) ? c$k1_app_arg : elI23;

    k__dc_arg_sel_arg_23 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd24) ? c$k1_app_arg : elI24;

    k__dc_arg_sel_arg_24 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd25) ? c$k1_app_arg : elI25;

    k__dc_arg_sel_arg_25 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd26) ? c$k1_app_arg : elI26;

    k__dc_arg_sel_arg_26 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd27) ? c$k1_app_arg : elI27;

    k__dc_arg_sel_arg_27 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd28) ? c$k1_app_arg : elI28;

    k__dc_arg_sel_arg_28 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd29) ? c$k1_app_arg : elI29;

    k__dc_arg_sel_arg_29 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd30) ? c$k1_app_arg : elI30;

    k__dc_arg_sel_arg_30 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd31) ? c$k1_app_arg : elI31;

    k__dc_arg_sel_arg_31 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd32) ? c$k1_app_arg : elI32;

    k__dc_arg_sel_arg_32 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd33) ? c$k1_app_arg : elI33;

    k__dc_arg_sel_arg_33 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd34) ? c$k1_app_arg : elI34;

    k__dc_arg_sel_arg_34 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd35) ? c$k1_app_arg : elI35;

    k__dc_arg_sel_arg_35 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd36) ? c$k1_app_arg : elI36;

    k__dc_arg_sel_arg_36 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd37) ? c$k1_app_arg : elI37;

    k__dc_arg_sel_arg_37 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd38) ? c$k1_app_arg : elI38;

    k__dc_arg_sel_arg_38 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd39) ? c$k1_app_arg : elI39;

    k__dc_arg_sel_arg_39 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd40) ? c$k1_app_arg : elI40;

    k__dc_arg_sel_arg_40 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd41) ? c$k1_app_arg : elI41;

    k__dc_arg_sel_arg_41 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd42) ? c$k1_app_arg : elI42;

    k__dc_arg_sel_arg_42 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd43) ? c$k1_app_arg : elI43;

    k__dc_arg_sel_arg_43 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd44) ? c$k1_app_arg : elI44;

    k__dc_arg_sel_arg_44 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd45) ? c$k1_app_arg : elI45;

    k__dc_arg_sel_arg_45 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd46) ? c$k1_app_arg : elI46;

    k__dc_arg_sel_arg_46 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd47) ? c$k1_app_arg : elI47;

    k__dc_arg_sel_arg_47 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd48) ? c$k1_app_arg : elI48;

    k__dc_arg_sel_arg_48 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd49) ? c$k1_app_arg : elI49;

    k__dc_arg_sel_arg_49 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd50) ? c$k1_app_arg : elI50;

    k__dc_arg_sel_arg_50 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd51) ? c$k1_app_arg : elI51;

    k__dc_arg_sel_arg_51 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd52) ? c$k1_app_arg : elI52;

    k__dc_arg_sel_arg_52 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd53) ? c$k1_app_arg : elI53;

    k__dc_arg_sel_arg_53 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd54) ? c$k1_app_arg : elI54;

    k__dc_arg_sel_arg_54 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd55) ? c$k1_app_arg : elI55;

    k__dc_arg_sel_arg_55 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd56) ? c$k1_app_arg : elI56;

    k__dc_arg_sel_arg_56 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd57) ? c$k1_app_arg : elI57;

    k__dc_arg_sel_arg_57 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd58) ? c$k1_app_arg : elI58;

    k__dc_arg_sel_arg_58 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd59) ? c$k1_app_arg : elI59;

    k__dc_arg_sel_arg_59 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd60) ? c$k1_app_arg : elI60;

    k__dc_arg_sel_arg_60 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd61) ? c$k1_app_arg : elI61;

    k__dc_arg_sel_arg_61 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd62) ? c$k1_app_arg : elI62;

    k__dc_arg_sel_arg_62 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd63) ? c$k1_app_arg : elI63;

    k__dc_arg_sel_arg_63 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd64) ? c$k1_app_arg : elI64;

    k__dc_arg_sel_arg_64 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd65) ? c$k1_app_arg : elI65;

    k__dc_arg_sel_arg_65 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd66) ? c$k1_app_arg : elI66;

    k__dc_arg_sel_arg_66 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd67) ? c$k1_app_arg : elI67;

    k__dc_arg_sel_arg_67 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd68) ? c$k1_app_arg : elI68;

    k__dc_arg_sel_arg_68 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd69) ? c$k1_app_arg : elI69;

    k__dc_arg_sel_arg_69 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd70) ? c$k1_app_arg : elI70;

    k__dc_arg_sel_arg_70 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd71) ? c$k1_app_arg : elI71;

    k__dc_arg_sel_arg_71 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd72) ? c$k1_app_arg : elI72;

    k__dc_arg_sel_arg_72 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd73) ? c$k1_app_arg : elI73;

    k__dc_arg_sel_arg_73 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd74) ? c$k1_app_arg : elI74;

    k__dc_arg_sel_arg_74 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd75) ? c$k1_app_arg : elI75;

    k__dc_arg_sel_arg_75 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd76) ? c$k1_app_arg : elI76;

    k__dc_arg_sel_arg_76 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd77) ? c$k1_app_arg : elI77;

    k__dc_arg_sel_arg_77 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd78) ? c$k1_app_arg : elI78;

    k__dc_arg_sel_arg_78 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd79) ? c$k1_app_arg : elI79;

    k__dc_arg_sel_arg_79 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd80) ? c$k1_app_arg : elI80;

    k__dc_arg_sel_arg_80 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd81) ? c$k1_app_arg : elI81;

    k__dc_arg_sel_arg_81 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd82) ? c$k1_app_arg : elI82;

    k__dc_arg_sel_arg_82 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd83) ? c$k1_app_arg : elI83;

    k__dc_arg_sel_arg_83 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd84) ? c$k1_app_arg : elI84;

    k__dc_arg_sel_arg_84 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd85) ? c$k1_app_arg : elI85;

    k__dc_arg_sel_arg_85 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd86) ? c$k1_app_arg : elI86;

    k__dc_arg_sel_arg_86 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd87) ? c$k1_app_arg : elI87;

    k__dc_arg_sel_arg_87 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd88) ? c$k1_app_arg : elI88;

    k__dc_arg_sel_arg_88 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd89) ? c$k1_app_arg : elI89;

    k__dc_arg_sel_arg_89 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd90) ? c$k1_app_arg : elI90;

    k__dc_arg_sel_arg_90 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd91) ? c$k1_app_arg : elI91;

    k__dc_arg_sel_arg_91 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd92) ? c$k1_app_arg : elI92;

    k__dc_arg_sel_arg_92 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd93) ? c$k1_app_arg : elI93;

    k__dc_arg_sel_arg_93 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd94) ? c$k1_app_arg : elI94;

    k__dc_arg_sel_arg_94 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd95) ? c$k1_app_arg : elI95;

    k__dc_arg_sel_arg_95 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd96) ? c$k1_app_arg : elI96;

    k__dc_arg_sel_arg_96 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd97) ? c$k1_app_arg : elI97;

    k__dc_arg_sel_arg_97 = (($unsigned({{(64-8) {1'b0}},regAddr1})) == 64'sd98) ? c$k1_app_arg : elI98;

    k_2 = {k__dc_arg_sel_arg,
           k__dc_arg_sel_arg_0,   k__dc_arg_sel_arg_1,
           k__dc_arg_sel_arg_2,   k__dc_arg_sel_arg_3,
           k__dc_arg_sel_arg_4,   k__dc_arg_sel_arg_5,
           k__dc_arg_sel_arg_6,   k__dc_arg_sel_arg_7,
           k__dc_arg_sel_arg_8,   k__dc_arg_sel_arg_9,
           k__dc_arg_sel_arg_10,   k__dc_arg_sel_arg_11,
           k__dc_arg_sel_arg_12,   k__dc_arg_sel_arg_13,
           k__dc_arg_sel_arg_14,   k__dc_arg_sel_arg_15,
           k__dc_arg_sel_arg_16,   k__dc_arg_sel_arg_17,
           k__dc_arg_sel_arg_18,   k__dc_arg_sel_arg_19,
           k__dc_arg_sel_arg_20,   k__dc_arg_sel_arg_21,
           k__dc_arg_sel_arg_22,   k__dc_arg_sel_arg_23,
           k__dc_arg_sel_arg_24,   k__dc_arg_sel_arg_25,
           k__dc_arg_sel_arg_26,   k__dc_arg_sel_arg_27,
           k__dc_arg_sel_arg_28,   k__dc_arg_sel_arg_29,
           k__dc_arg_sel_arg_30,   k__dc_arg_sel_arg_31,
           k__dc_arg_sel_arg_32,   k__dc_arg_sel_arg_33,
           k__dc_arg_sel_arg_34,   k__dc_arg_sel_arg_35,
           k__dc_arg_sel_arg_36,   k__dc_arg_sel_arg_37,
           k__dc_arg_sel_arg_38,   k__dc_arg_sel_arg_39,
           k__dc_arg_sel_arg_40,   k__dc_arg_sel_arg_41,
           k__dc_arg_sel_arg_42,   k__dc_arg_sel_arg_43,
           k__dc_arg_sel_arg_44,   k__dc_arg_sel_arg_45,
           k__dc_arg_sel_arg_46,   k__dc_arg_sel_arg_47,
           k__dc_arg_sel_arg_48,   k__dc_arg_sel_arg_49,
           k__dc_arg_sel_arg_50,   k__dc_arg_sel_arg_51,
           k__dc_arg_sel_arg_52,   k__dc_arg_sel_arg_53,
           k__dc_arg_sel_arg_54,   k__dc_arg_sel_arg_55,
           k__dc_arg_sel_arg_56,   k__dc_arg_sel_arg_57,
           k__dc_arg_sel_arg_58,   k__dc_arg_sel_arg_59,
           k__dc_arg_sel_arg_60,   k__dc_arg_sel_arg_61,
           k__dc_arg_sel_arg_62,   k__dc_arg_sel_arg_63,
           k__dc_arg_sel_arg_64,   k__dc_arg_sel_arg_65,
           k__dc_arg_sel_arg_66,   k__dc_arg_sel_arg_67,
           k__dc_arg_sel_arg_68,   k__dc_arg_sel_arg_69,
           k__dc_arg_sel_arg_70,   k__dc_arg_sel_arg_71,
           k__dc_arg_sel_arg_72,   k__dc_arg_sel_arg_73,
           k__dc_arg_sel_arg_74,   k__dc_arg_sel_arg_75,
           k__dc_arg_sel_arg_76,   k__dc_arg_sel_arg_77,
           k__dc_arg_sel_arg_78,   k__dc_arg_sel_arg_79,
           k__dc_arg_sel_arg_80,   k__dc_arg_sel_arg_81,
           k__dc_arg_sel_arg_82,   k__dc_arg_sel_arg_83,
           k__dc_arg_sel_arg_84,   k__dc_arg_sel_arg_85,
           k__dc_arg_sel_arg_86,   k__dc_arg_sel_arg_87,
           k__dc_arg_sel_arg_88,   k__dc_arg_sel_arg_89,
           k__dc_arg_sel_arg_90,   k__dc_arg_sel_arg_91,
           k__dc_arg_sel_arg_92,   k__dc_arg_sel_arg_93,
           k__dc_arg_sel_arg_94,   k__dc_arg_sel_arg_95,
           k__dc_arg_sel_arg_96,   k__dc_arg_sel_arg_97};

    k2_0 = {k_2,   {1'b0,   1'b0,   1'b0,   1'b0,
                    1'b0,   1'b0,   1'b0,   1'b0},   64'sd0,
            3'd6,   prevSCL1,   prevSDA1,   sdaOut2,
            regAddr1};

    k_3 = {regFile2,   addr1,   cntr1,   3'd7,
           prevSCL1,   prevSDA1,   1'b0,   regAddr1};

    k_4 = {regFile2,   addr1,   cntr1,   3'd0,
           prevSCL1,   prevSDA1,   1'b1,   regAddr1};

    case(atStateM1)
      3'b000 : begin
        stateMachine_sel_alt_sel_arg_selection_res = ((prevSDA1 == (1'b1)) & (sda == (1'b0))) & c$app_arg;

        case(stateMachine_sel_alt_sel_arg_selection_res)
          1'b0 : begin
            stateMachine_sel_alt_sel_arg_sel_alt_res = s;

            stateMachine_sel_alt_sel_arg = stateMachine_sel_alt_sel_arg_sel_alt_res;


          end
          default : begin
            $display(("start"));

            stateMachine_sel_alt_sel_arg_sel_alt_res_0 = k;

            stateMachine_sel_alt_sel_arg_sel_alt_res_1 = stateMachine_sel_alt_sel_arg_sel_alt_res_0;

            stateMachine_sel_alt_sel_arg = stateMachine_sel_alt_sel_arg_sel_alt_res_1;


          end
        endcase



        stateMachine = stateMachine_sel_alt_sel_arg;


      end
      3'b001 : begin
        case(x)
          64'sd8 : begin
            case(c$case_scrut_0)
              8'b10011000 : begin
                $display(("valid addr"));

                stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res = k1_0;

                stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_0 = stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res;

                stateMachine_sel_alt_sel_arg_sel_alt_sel_arg = stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_0;


              end
              default : begin
                $display(("invalid addr"));

                stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_1 = k1;

                stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_2 = stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_1;

                stateMachine_sel_alt_sel_arg_sel_alt_sel_arg = stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_2;


              end
            endcase



            stateMachine_sel_alt_sel_arg_0 = stateMachine_sel_alt_sel_arg_sel_alt_sel_arg;


          end
          default : begin
            case(c$case_scrut)
              1'b0 : begin
                stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_3 = s;

                stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_0 = stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_3;


              end
              default : begin
                stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_4 = {regFile2,
                                                                              \c$<<+Out ,   x + 64'sd1,   3'd1,
                                                                              prevSCL1,   prevSDA1,   1'b1,   regAddr1};

                stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_0 = stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_4;


              end
            endcase



            stateMachine_sel_alt_sel_arg_0 = stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_0;


          end
        endcase



        stateMachine = stateMachine_sel_alt_sel_arg_0;


      end
      3'b010 : begin
        case(c$case_scrut)
          1'b0 : begin
            stateMachine_sel_alt_sel_arg_sel_alt_res_2 = s;

            stateMachine_sel_alt_sel_arg_1 = stateMachine_sel_alt_sel_arg_sel_alt_res_2;


          end
          default : begin
            $display(("addrAck"));

            stateMachine_sel_alt_sel_arg_sel_alt_res_3 = k_0;

            stateMachine_sel_alt_sel_arg_sel_alt_res_4 = stateMachine_sel_alt_sel_arg_sel_alt_res_3;

            stateMachine_sel_alt_sel_arg_1 = stateMachine_sel_alt_sel_arg_sel_alt_res_4;


          end
        endcase



        stateMachine = stateMachine_sel_alt_sel_arg_1;


      end
      3'b011 : begin
        case(x)
          64'sd8 : begin
            stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_selection_res = ((c$case_scrut_0 >= 8'b00000000) | (c$case_scrut_0 <= 8'b00000001)) & (( c$case_scrut_0[0] ) == (1'b0));

            case(stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_selection_res)
              1'b0 : begin
                $display(("invalid reg addr"));

                stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_5 = k1;

                stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_6 = stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_5;

                stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_1 = stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_6;


              end
              default : begin
                $display(("valid reg addr"));

                stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_7 = k2;

                stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_8 = stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_7;

                stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_1 = stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_8;


              end
            endcase



            stateMachine_sel_alt_sel_arg_2 = stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_1;


          end
          default : begin
            case(c$case_scrut)
              1'b0 : begin
                stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_9 = s;

                stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_2 = stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_9;


              end
              default : begin
                stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_10 = {regFile2,
                                                                               \c$<<+Out ,   x + 64'sd1,   3'd3,
                                                                               prevSCL1,   prevSDA1,   1'b1,
                                                                               regAddr1};

                stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_2 = stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_10;


              end
            endcase



            stateMachine_sel_alt_sel_arg_2 = stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_2;


          end
        endcase



        stateMachine = stateMachine_sel_alt_sel_arg_2;


      end
      3'b100 : begin
        case(c$case_scrut)
          1'b0 : begin
            stateMachine_sel_alt_sel_arg_sel_alt_res_5 = s;

            stateMachine_sel_alt_sel_arg_3 = stateMachine_sel_alt_sel_arg_sel_alt_res_5;


          end
          default : begin
            $display(("regAck"));

            stateMachine_sel_alt_sel_arg_sel_alt_res_6 = k_1;

            stateMachine_sel_alt_sel_arg_sel_alt_res_7 = stateMachine_sel_alt_sel_arg_sel_alt_res_6;

            stateMachine_sel_alt_sel_arg_3 = stateMachine_sel_alt_sel_arg_sel_alt_res_7;


          end
        endcase



        stateMachine = stateMachine_sel_alt_sel_arg_3;


      end
      3'b101 : begin
        case(x)
          64'sd8 : begin
            $display(("val"));

            stateMachine_sel_alt_sel_arg_sel_alt_res_8 = k2_0;

            stateMachine_sel_alt_sel_arg_sel_alt_res_9 = stateMachine_sel_alt_sel_arg_sel_alt_res_8;

            stateMachine_sel_alt_sel_arg_4 = stateMachine_sel_alt_sel_arg_sel_alt_res_9;


          end
          default : begin
            case(c$case_scrut)
              1'b0 : begin
                stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_11 = s;

                stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_3 = stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_11;


              end
              default : begin
                stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_12 = {regFile2,
                                                                               \c$<<+Out ,   x + 64'sd1,   3'd5,
                                                                               prevSCL1,   prevSDA1,   1'b1,
                                                                               regAddr1};

                stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_3 = stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_sel_alt_res_12;


              end
            endcase



            stateMachine_sel_alt_sel_arg_4 = stateMachine_sel_alt_sel_arg_sel_alt_sel_arg_3;


          end
        endcase



        stateMachine = stateMachine_sel_alt_sel_arg_4;


      end
      3'b110 : begin
        case(c$case_scrut)
          1'b0 : begin
            stateMachine_sel_alt_sel_arg_sel_alt_res_10 = s;

            stateMachine_sel_alt_sel_arg_5 = stateMachine_sel_alt_sel_arg_sel_alt_res_10;


          end
          default : begin
            $display(("valAck"));

            stateMachine_sel_alt_sel_arg_sel_alt_res_11 = k_3;

            stateMachine_sel_alt_sel_arg_sel_alt_res_12 = stateMachine_sel_alt_sel_arg_sel_alt_res_11;

            stateMachine_sel_alt_sel_arg_5 = stateMachine_sel_alt_sel_arg_sel_alt_res_12;


          end
        endcase



        stateMachine = stateMachine_sel_alt_sel_arg_5;


      end
      default : begin
        stateMachine_sel_alt_sel_arg_selection_res_0 = ((prevSDA1 == (1'b0)) & (sda == (1'b1))) & c$app_arg;

        case(stateMachine_sel_alt_sel_arg_selection_res_0)
          1'b0 : begin
            stateMachine_sel_alt_sel_arg_sel_alt_res_13 = s;

            stateMachine_sel_alt_sel_arg_6 = stateMachine_sel_alt_sel_arg_sel_alt_res_13;


          end
          default : begin
            $display(("stop"));

            stateMachine_sel_alt_sel_arg_sel_alt_res_14 = k_4;

            stateMachine_sel_alt_sel_arg_sel_alt_res_15 = stateMachine_sel_alt_sel_arg_sel_alt_res_14;

            stateMachine_sel_alt_sel_arg_6 = stateMachine_sel_alt_sel_arg_sel_alt_res_15;


          end
        endcase



        stateMachine = stateMachine_sel_alt_sel_arg_6;


      end
    endcase



    s0 = {stateMachine[877:86],   stateMachine[85:78],   $signed(stateMachine[77:14]),
       stateMachine[13:11],   scl,   sda,   stateMachine[8:8],   stateMachine[7:0]};

    result_2 = {sdaOut2,   regFile2};

    result_2 = result_2;

    result_1 = result_2;


  end



  always @* begin
    result = result_1;


  end




endmodule

