/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.6.3. DO NOT MODIFY.
*/
`timescale 100fs/100fs
module HDMIComponent
    ( // Inputs
      input  clk_25 // clock
    , input  arst // reset
    , input  en // enable
    , input  rst
    , input  pcsda
    , input [9:0] iR
    , input [9:0] iG
    , input [9:0] iB
    , input  hs
    , input  vs
    , input  de

      // Outputs
    , output wire  oR
    , output wire  oG
    , output wire [9:0] oB
    , output wire [9:0] oVS
    , output wire [9:0] oHS
    , output wire  oDE
    , output wire  sclo
    , output wire  I2C_SCLK
    , output wire [3:0] sdao
    );
  wire [12:0] result_0;
  wire [15:0] c$case_alt;
  wire [15:0] result_1;
  // Hdmi/Init.hs:52:1-11
  reg [18:0] state = {3'd0,   1'b0,   1'b0,   1'b0,   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                  1'b0,   1'b0},   4'd0,   1'b0};
  wire [18:0] c$ds_app_arg;
  reg [18:0] result_2;
  wire [18:0] c$ds_case_alt;
  wire [18:0] c$ds_case_alt_0;
  wire [18:0] c$ds_case_alt_1;
  wire [18:0] c$ds_case_alt_2;
  wire [18:0] c$ds_case_alt_3;
  wire [18:0] c$ds_case_alt_4;
  wire  c$ds_case_scrut;
  wire [18:0] c$ds_case_alt_5;
  // Hdmi/Init.hs:52:1-11
  wire  done;
  // HDMI.hs:60:1-9
  wire [0:0] c$ds2_app_arg;
  // HDMI.hs:60:1-9
  wire [3:0] i2cO;
  // HDMI.hs:60:1-9
  wire [15:0] ds2;
  wire [3:0] c$i_15;
  wire [127:0] c$vecFlat;
  wire [2:0] result_selection_4;
  wire [7:0] result_sel_alt_res;
  wire [7:0] c$vec;
  wire  clk_26;
  wire  arst_0;
  wire  rst_0;
  wire  ena_0;
  wire [15:0] clkCnt_0;
  wire  start_0;
  wire  stop_0;
  wire  read_0;
  wire  write_0;
  wire  ackIn_0;
  wire [7:0] din_0;
  wire [1:0] i2cI_0;
  wire [15:0] result_4;
  wire [7:0] dout_0;
  wire  hostAck_0;
  wire  busy_0;
  wire  al_0;
  wire  ackOut_0;
  wire [3:0] result_5;
  wire  i2cO_clk_0;
  wire  result_5_13;
  wire  result_5_14;
  wire  result_5_15;
  wire [38:0] result;

  assign result_0 = {state[15:15],
                     state[14:14],   state[13:13],
                     ((state[12:5])),   done,   state[0:0]};

  assign c$i_15 = state[4:1];

  assign c$vecFlat = {{8'b00000000,
                       8'b00010000},   {8'b00001000,   8'b00000000},
                      {8'b00001000,   8'b00010000},   {8'b11000010,
                                                       8'b00010000},   {8'b00001000,   8'b00000000},
                      {8'b00001000,   8'b00000100},   {8'b00001000,
                                                       8'b00000000},   {8'b11000010,   8'b00000000}};

  // index begin
  wire [15:0] vecArray [0:8-1];
  genvar i;
  generate
  for (i=0; i < 8; i=i+1) begin : mk_array
    assign vecArray[(8-1)-i] = c$vecFlat[i*16+:16];
  end
  endgenerate
  assign c$case_alt = vecArray[($unsigned({{(64-4) {1'b0}},c$i_15}))];
  // index end

  assign result_1 = (state[4:1] > 4'd6) ? {8'b00000100,
                                           8'b00000000} : c$case_alt;

  // register begin
  always @(posedge clk_25 or  posedge  arst) begin : state_register
    if ( arst) begin
      state <= {3'd0,   1'b0,   1'b0,   1'b0,   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                    1'b0,   1'b0},   4'd0,   1'b0};
    end else begin
      state <= c$ds_app_arg;
    end
  end
  // register end

  assign c$ds_app_arg = rst ? {3'd0,   1'b0,
                               1'b0,   1'b0,   {8 {(1'b0)}},   4'd0,
                               1'b0} : result_2;

  assign result_selection_4 = state[18:16];

  assign c$vec = (8'b10011000);

  // map begin
  genvar i_0;
  generate
  for (i_0=0; i_0 < 8; i_0 = i_0 + 1) begin : map
    wire [0:0] map_in;
    assign map_in = c$vec[i_0*1+:1];
    wire  map_out;
    assign map_out = map_in;


    assign result_sel_alt_res[i_0*1+:1] = map_out;
  end
  endgenerate
  // map end

  always @(*) begin
    case(result_selection_4)
      3'b000 : result_2 = c$ds_case_alt_5;
      3'b001 : result_2 = {3'd2,   1'b1,
                           state[14:14],   1'b1,   result_sel_alt_res,
                           state[4:1],   state[0:0]};
      3'b010 : result_2 = c$ds_case_alt_4;
      3'b011 : result_2 = c$ds_case_alt_3;
      3'b100 : result_2 = c$ds_case_alt_2;
      3'b101 : result_2 = c$ds_case_alt_1;
      3'b110 : result_2 = c$ds_case_alt_0;
      default : result_2 = c$ds_case_alt;
    endcase
  end

  assign c$ds_case_alt = ds2[4:4] ? {3'd0,
                                     state[15:15],   state[14:14],   state[13:13],
                                     state[12:5],   state[4:1],   1'b1} : {3'd0,
                                                                           state[15:15],   state[14:14],
                                                                           state[13:13],   state[12:5],
                                                                           state[4:1] + 4'd1,   1'b0};

  assign c$ds_case_alt_0 = c$ds_case_scrut ? {3'd7,
                                              state[15:15],   1'b0,   1'b0,   state[12:5],
                                              state[4:1],   state[0:0]} : state;

  assign c$ds_case_alt_1 = ds2[4:4] ? {3'd0,
                                       state[15:15],   state[14:14],   state[13:13],
                                       state[12:5],   state[4:1],   1'b1} : {3'd6,
                                                                             state[15:15],   1'b1,   1'b1,
                                                                             (result_1[7:0]),   state[4:1],   1'b0};

  assign c$ds_case_alt_2 = c$ds_case_scrut ? {3'd5,
                                              state[15:15],   state[14:14],   1'b0,
                                              state[12:5],   state[4:1],
                                              state[0:0]} : state;

  assign c$ds_case_alt_3 = ds2[4:4] ? {3'd0,
                                       state[15:15],   state[14:14],   state[13:13],
                                       state[12:5],   state[4:1],   1'b1} : {3'd4,
                                                                             state[15:15],   state[14:14],   1'b1,
                                                                             (result_1[15:8]),   state[4:1],   1'b0};

  assign c$ds_case_alt_4 = c$ds_case_scrut ? {3'd3,
                                              1'b0,   state[14:14],   1'b0,   state[12:5],
                                              state[4:1],   state[0:0]} : state;

  assign c$ds_case_scrut = ds2[7:7] & (~ ds2[5:5]);

  assign c$ds_case_alt_5 = (~ done) ? {3'd1,
                                       state[15:15],   state[14:14],   state[13:13],
                                       state[12:5],   state[4:1],
                                       state[0:0]} : state;

  assign done = state[4:1] == 4'd7;

  assign c$ds2_app_arg = i2cO[2:2] ? 1'b1 : 1'b0;

  assign result = {result_0[1:1],
                   result_0[0:0],   iR,   iG,   iB,   hs,   vs,
                   de,   i2cO};

  assign i2cO = ds2[3:0];

  assign clk_26 = clk_25;

  assign arst_0 = arst;

  assign rst_0 = rst;

  assign ena_0 = 1'b1;

  assign clkCnt_0 = 16'd250;

  assign start_0 = result_0[12:12];

  assign stop_0 = result_0[11:11];

  assign read_0 = 1'b0;

  assign write_0 = result_0[10:10];

  assign ackIn_0 = 1'b0;

  assign din_0 = result_0[9:2];

  assign i2cI_0 = {(c$ds2_app_arg),   pcsda};

  i2c i2c_ds2
    ( clk_26
    , arst_0
    , rst_0
    , ena_0
    , clkCnt_0
    , start_0
    , stop_0
    , read_0
    , write_0
    , ackIn_0
    , din_0
    , i2cI_0
    , dout_0
    , hostAck_0
    , busy_0
    , al_0
    , ackOut_0
    , i2cO_clk_0
    , result_5_13
    , result_5_14
    , result_5_15 );

  assign result_4 = {dout_0,   hostAck_0,
                     busy_0,   al_0,   ackOut_0,   result_5};

  assign result_5 = {i2cO_clk_0,   result_5_13,
                     result_5_14,   result_5_15};

  assign ds2 = result_4;

  assign oR = result[38:38];

  assign oG = result[37:37];

  assign oB = result[36:27];

  assign oVS = result[26:17];

  assign oHS = result[16:7];

  assign oDE = result[6:6];

  assign sclo = result[5:5];

  assign I2C_SCLK = result[4:4];

  assign sdao = result[3:0];


endmodule

